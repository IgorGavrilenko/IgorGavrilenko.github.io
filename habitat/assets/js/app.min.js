/******/ (() => { // webpackBootstrap
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other entry modules.
(() => {
/*!****************************!*\
  !*** ./src/scripts/app.js ***!
  \****************************/
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

var scroller;
gsap.registerPlugin(ScrollTrigger); // mutation

var observeObject = function () {
  var _class = {
    init: function init(selector, callback) {
      var element = document.querySelector(selector);

      try {
        var observer = new MutationObserver(function (mutations) {
          mutations.forEach(function (mutation) {
            callback(mutation.target, mutation.attributeName, mutation.oldValue);
          });
        });
        observer.observe(element, {
          attributes: true,
          subtree: true,
          attributeOldValue: true
        });
      } catch (z) {
        element.addEventListener('DOMAttrModified', function (e) {
          callback(e.target, e.attrName, e.prevValue);
        }, false);
      }
    }
  };
  return _class;
}();

$(document).ready(function () {
  'use strict'; // footerReadyEnd

  function footerReadyEnd() {
    var footerEndId = '#footer-end';
    var body = $('body');
    var footerReady = 'footer-ready';
    var footerEndClass = 'footer-end';
    var attrClass = 'class';
    observeObject.init(footerEndId, function (target, name, oldValue) {
      if (target.getAttribute(attrClass) == footerEndClass) {
        body.addClass(footerReady);
      } else {
        body.removeClass(footerReady);
      }
    });
  }

  ;
  footerReadyEnd();

  function footerReadyStart() {
    var checkbox = document.querySelector('.container--footer');

    if (checkbox) {
      var callback = function callback(mutationList, observer1) {
        mutationList.forEach(function (mutation) {
          if (mutation.type === 'attributes' && mutation.attributeName === 'class') {
            if ($('.container--footer').hasClass('footer-start')) {
              $('body').addClass('footer-ready-start');
            } else {
              $('body').removeClass('footer-ready-start');
            }
          }
        });
      };

      var options = {
        attributes: true
      };
      var observer1 = new MutationObserver(callback);
      observer1.observe(checkbox, options);
    }

    ;
  }

  ;
  footerReadyStart(); // loader

  function loaderFunc() {
    var description = [];
    var arr = [];
    var introDataImg = $('.intro__data-img');
    var dataSrc = 'data-src';
    var introImg = $('.intro__img').find('img');
    var introImgAttr = 'src';
    introDataImg.each(function () {
      description.push($(this).attr(dataSrc));
    });
    $.each(description, function (i, el) {
      setTimeout(function () {
        arr.push(el);

        if (arr.length === description.length) {
          introImg.attr(introImgAttr, function (i, src) {
            return arr[i];
          });
        }

        ;
      }, 1 + Math.floor(Math.random() * 10));
    }); // intro

    setTimeout(function () {
      $("body").addClass("ready");
    }, 3500);
    setTimeout(function () {
      $(".projects").addClass("ready");
    }, 5000);
    setTimeout(function () {
      $(".intro").addClass("ready");
    }, 500);
    setTimeout(function () {
      Splitting();
    }, 4000);
  }

  ;
  observeObject.init('body', function (target, name, oldValue) {
    if (target.getAttribute('class') == 'contact-page') {
      setTimeout(function () {
        $('.contact-page').addClass('load');
      }, 500);
    }
  });

  function scriptLoad() {
    // LocomotiveScroll
    var pageContainer = document.querySelector(".main");
    scroller = new LocomotiveScroll({
      el: pageContainer,
      smooth: true,
      getDirection: true,
      reloadOnContextChange: true,
      mobile: {
        breakpoint: 0,
        smooth: true
      },
      tablet: {
        breakpoint: 0,
        smooth: true
      }
    });
    scroller.on("scroll", ScrollTrigger.update); // teamScroll

    scroller.on("scroll", function (t) {
      document.documentElement.setAttribute("data-direction", t.direction);
    });
    scroller.on("scroll", ScrollTrigger.update);
    ScrollTrigger.scrollerProxy(pageContainer, {
      scrollTop: function scrollTop(value) {
        return arguments.length ? scroller.scrollTo(value, 0, 0) : scroller.scroll.instance.scroll.y;
      },
      getBoundingClientRect: function getBoundingClientRect() {
        return {
          left: 0,
          top: 0,
          width: window.innerWidth,
          height: window.innerHeight
        };
      },
      pinType: pageContainer.style.transform ? "transform" : "fixed"
    });
    var scrollContainer = '[data-scroll-container]';
    var teamTrigger = '.team';
    var teamScroll = gsap.utils.toArray(".team__item");
    var start = 'left left';
    var end = '+=6000';

    if (teamScroll.length > 0) {
      var scrollTeam = gsap.to(teamScroll, {
        xPercent: -100 * teamScroll.length,
        ease: "none",
        scrollTrigger: {
          anticipatePin: true,
          duration: 1,
          scroller: scrollContainer,
          trigger: teamTrigger,
          pin: true,
          scrub: true,
          start: start,
          end: end,
          invalidateOnRefresh: true
        }
      });
      ScrollTrigger.addEventListener("refresh", function () {
        return scroller.update();
      });
      ScrollTrigger.refresh();
    } // scroller update on resize


    window.addEventListener('resize', function (event) {
      setTimeout(function () {
        scroller.update();
        scroller.on("scroll", ScrollTrigger.update);
      }, 1000);
    }, true); // servicesScroll

    var servicesItem = gsap.utils.toArray(".services__item");

    if (servicesItem.length > 0) {
      var services = document.querySelector(".services");
      var servicesImg = document.querySelector('.services-img');
      var activeClass = 'active';
      var sections = document.querySelectorAll('.services__item');
      var primerImg = document.querySelector('[data-panel="panel_1"]');
      var _scrollContainer = '[data-scroll-container]';
      var _start = 'left left';
      ScrollTrigger.matchMedia({
        '(min-width: 992px)': function minWidth992px() {
          var active = [];

          var changeFunc = function changeFunc(active) {
            servicesItem.forEach(function (e) {
              e.classList.remove(activeClass);
            });
            servicesItem[active].classList.add(activeClass);
          };

          var activeFunc = function activeFunc(progress) {
            var el = 1 / (servicesItem.length - 1);
            var activeItem = Math.round(progress.toFixed(3) / el);

            if (active != activeItem && servicesImg) {
              active = activeItem;
              changeFunc(active);
            }
          };

          var servicesScroll = gsap.to(servicesItem, {
            xPercent: -100 * (servicesItem.length - 1),
            ease: "none",
            scrollTrigger: {
              scroller: _scrollContainer,
              scrub: 1,
              trigger: services,
              pin: services,
              anticipatePin: true,
              start: _start,
              duration: 2,
              snap: {
                snapTo: 1 / (servicesItem.length - 1),
                duration: 0.5
              },
              end: function end() {
                return "+=" + services.offsetWidth * 1.7;
              },
              onUpdate: function onUpdate(_ref) {
                var progress = _ref.progress,
                    direction = _ref.direction,
                    isActive = _ref.isActive;
                return activeFunc(progress);
              },
              invalidateOnRefresh: true
            }
          });
          primerImg.classList.add(activeClass);
          sections.forEach(function (section) {
            var panel_id = section.id;
            gsap.to(section, {
              scrollTrigger: {
                trigger: section,
                start: 'left 35%',
                end: 'right 35%',
                containerAnimation: servicesScroll,
                toggleClass: {
                  targets: '[data-panel=' + panel_id + ']',
                  className: activeClass
                }
              }
            });
          });
        }
      });
    }

    ; //fixed header

    function fixedHeader() {
      var header = $('.header');
      var headerFixed = 'header--fixed';
      scroller.on('scroll', function (object) {
        if (object.scroll.y >= 90) {
          header.addClass(headerFixed);
        } else {
          header.removeClass(headerFixed);
        }

        ;
      });
    }

    ;
    fixedHeader(); // spoiler

    function spoilerFunc() {
      var $spoilerItem = $('.spoiler__item');
      var $spoilerHead = $('.spoiler__header');
      var $spoilerBody = $('.spoiler__body');
      var $one = 'one';
      var $isActive = 'is-active';
      $spoilerHead.on('click', function (event) {
        setTimeout(function () {
          scroller.update();
        }, 500);

        if ($spoilerItem.hasClass($one)) {
          $spoilerHead.not($(this).removeClass($isActive)).parent().removeClass($isActive);
          $spoilerBody.not($(this).next()).slideUp(150);
        }

        $(this).toggleClass($isActive).next().slideToggle(150);
        $(this).parent().toggleClass($isActive);
      });
    }

    ;
    spoilerFunc();
    setTimeout(function () {
      scroller.update();
      ScrollTrigger.refresh();
    }, 3500); // cursor

    function cursorFunc() {
      var mXl = window.matchMedia('(min-width: 1200px)');

      var handleCursor = function handleCursor(mXl) {
        if (mXl.matches) {
          var getDimensions = function getDimensions(e) {
            cursor.style.top = "".concat(e.clientY - 18, "px");
            cursor.style.left = "".concat(e.clientX - 9, "px");
          };

          var throttle = function throttle(callback, limit) {
            var wait = false;
            return function () {
              if (!wait) {
                callback.apply(null, arguments);
                wait = true;
                setTimeout(function () {
                  wait = false;
                }, limit);
              }
            };
          };

          var cursor = document.querySelector(".cursor");
          window.addEventListener("mousemove", function (e) {
            getDimensions(e);
          });
          var delay = 250;
          ;
          window.addEventListener("mousemove", function (e) {
            throttle(getDimensions(e), delay);
          });
        }
      };

      handleCursor(mXl);
      mXl.addListener(handleCursor);
    }

    ;
    cursorFunc(); // image hover

    function imageRevealHover() {
      var scrollY = 0;
      scroller.on('scroll', function (args) {
        scrollY = args.delta.y;
      });

      var getMousePos = function getMousePos(e) {
        var posx = 0;
        var posy = 0;
        if (!e) e = window.event;

        if (e.pageX || e.pageY) {
          posx = e.pageX;
          posy = e.pageY + scrollY;
        } else if (e.clientX || e.clientY) {
          posx = e.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;
          posy = e.clientY + document.body.scrollTop + document.documentElement.scrollTop;
        }

        return {
          x: posx,
          y: posy
        };
      };

      var HoverImgFx3 = /*#__PURE__*/function () {
        function HoverImgFx3(el) {
          _classCallCheck(this, HoverImgFx3);

          this.DOM = {
            el: el
          };
          this.DOM.reveal = document.createElement('div');
          this.DOM.reveal.className = 'hover-reveal';
          this.DOM.reveal.style.overflow = 'hidden';
          var textAfterImg = this.DOM.el.dataset.text;

          if (textAfterImg) {
            this.DOM.reveal.innerHTML = "<div class=\"hover-reveal__inner\">\n                        <div class=\"hover-reveal__img\" style=\"background-image:url(".concat(this.DOM.el.dataset.img, ")\"></div>\n                        <span class=\"hover-reveal__text\">As soon as we can ;)</span>\n                        </div><div class=\"hover-reveal__text\">").concat(this.DOM.el.dataset.text, "</div>");
          } else {
            this.DOM.reveal.innerHTML = "<div class=\"hover-reveal__inner\">\n                        <div class=\"hover-reveal__img\" style=\"background-image:url(".concat(this.DOM.el.dataset.img, ")\"></div>\n                        <span class=\"hover-reveal__text\">As soon as we can ;)</span>\n                        </div>");
          }

          this.DOM.el.appendChild(this.DOM.reveal);
          this.DOM.revealInner = this.DOM.reveal.querySelector('.hover-reveal__inner');
          this.DOM.revealInner.style.overflow = 'hidden';
          this.DOM.revealImg = this.DOM.revealInner.querySelector('.hover-reveal__img');
          this.DOM.letters = _toConsumableArray(this.DOM.el.querySelectorAll('span'));
          this.initEvents();
        }

        _createClass(HoverImgFx3, [{
          key: "initEvents",
          value: function initEvents() {
            var _this = this;

            this.positionElement = function (ev) {
              var mousePos = getMousePos(ev);
              var docScrolls = {
                left: document.body.scrollLeft + document.documentElement.scrollLeft,
                top: document.body.scrollTop + document.documentElement.scrollTop
              };
              _this.DOM.reveal.style.top = "".concat(mousePos.y + 20 - docScrolls.top, "px");
              _this.DOM.reveal.style.left = "".concat(mousePos.x + 20 - docScrolls.left, "px");
            };

            this.mouseenterFn = function (ev) {
              _this.positionElement(ev);

              _this.showImage();
            };

            this.mousemoveFn = function (ev) {
              return requestAnimationFrame(function () {
                _this.positionElement(ev);
              });
            };

            this.mouseleaveFn = function () {
              _this.hideImage();
            };

            this.DOM.el.addEventListener('mouseenter', this.mouseenterFn);
            this.DOM.el.addEventListener('mousemove', this.mousemoveFn);
            this.DOM.el.addEventListener('mouseleave', this.mouseleaveFn);
          }
        }, {
          key: "showImage",
          value: function showImage() {
            var _this2 = this;

            TweenMax.killTweensOf(this.DOM.revealInner);
            TweenMax.killTweensOf(this.DOM.revealImg);
            this.tl = new TimelineMax({
              onStart: function onStart() {
                _this2.DOM.reveal.style.opacity = 1;
                TweenMax.set(_this2.DOM.el, {
                  zIndex: 1000
                });
              }
            }).add('begin').set([this.DOM.revealInner, this.DOM.revealImg], {
              transformOrigin: '50% 100%'
            }).add(new TweenMax(this.DOM.revealInner, 0.4, {
              ease: Expo.easeOut,
              startAt: {
                x: '50%',
                y: '120%',
                rotation: 50
              },
              x: '0%',
              y: '0%',
              rotation: 0
            }), 'begin').add(new TweenMax(this.DOM.revealImg, 0.4, {
              ease: Expo.easeOut,
              startAt: {
                x: '-50%',
                y: '-120%',
                rotation: -50
              },
              x: '0%',
              y: '0%',
              rotation: 0
            }), 'begin').add(new TweenMax(this.DOM.revealImg, 0.7, {
              ease: Expo.easeOut,
              startAt: {
                scale: 2
              },
              scale: 1
            }), 'begin');
          }
        }, {
          key: "hideImage",
          value: function hideImage() {
            var _this3 = this;

            TweenMax.killTweensOf(this.DOM.revealInner);
            TweenMax.killTweensOf(this.DOM.revealImg);
            this.tl = new TimelineMax({
              onStart: function onStart() {
                TweenMax.set(_this3.DOM.el, {
                  zIndex: 999
                });
              },
              onComplete: function onComplete() {
                TweenMax.set(_this3.DOM.el, {
                  zIndex: ''
                });
                TweenMax.set(_this3.DOM.reveal, {
                  opacity: 0
                });
              }
            }).add('begin').add(new TweenMax(this.DOM.revealInner, 0.6, {
              ease: Expo.easeOut,
              y: '-120%',
              rotation: -5
            }), 'begin').add(new TweenMax(this.DOM.revealImg, 0.6, {
              ease: Expo.easeOut,
              y: '120%',
              rotation: 5,
              scale: 1.2
            }), 'begin');
          }
        }]);

        return HoverImgFx3;
      }();

      _toConsumableArray(document.querySelectorAll('[data-fx="3"] > .reveal-img__item, .reveal-img__item[data-fx="3"]')).forEach(function (link) {
        return new HoverImgFx3(link);
      });

      var contentel = document.querySelector('.reveal-img');

      _toConsumableArray(document.querySelectorAll('.reveal-img__item')).forEach(function (el) {
        var imgsArr = el.dataset.img.split(',');

        for (var i = 0, len = imgsArr.length; i <= len - 1; ++i) {
          var imgel = document.createElement('img');
          imgel.style.visibility = 'hidden';
          imgel.style.width = 0;
          imgel.src = imgsArr[i];
          imgel.className = 'preload';
          contentel.appendChild(imgel);
        }
      });

      imagesLoaded(document.querySelectorAll('.preload'), function () {
        return document.body.classList.remove('loading');
      });
    }

    ;
    imageRevealHover(); // validate

    function validate() {
      var contactForm = $('#contact-form');

      if (contactForm.length > 0) {
        $.validator.setDefaults({
          submitHandler: function submitHandler() {
            $(".contact").addClass('form-validate');
            scroller.scrollTo('top', {
              'offset': 0
            });
            setTimeout(function () {
              scroller.update();
            }, 500);
          }
        });
        contactForm.validate({
          rules: {
            name: "required",
            details: "required",
            email: {
              required: true,
              email: true
            }
          },
          messages: {
            name: "Please enter your name",
            email: "Please enter your email",
            details: "Please enter your project details"
          }
        });
      }

      ; // file input

      if ($('#file').length > 0) {
        $('#file').change(function () {
          var value = $(this).val();
          $('.add-file__text').text(value);
          $('.add-file__btn').show();
        });
      }

      ;
      $('.add-file__btn').on('click', function () {
        $('#file').val('');
        $(this).hide();
        $('.add-file__text').text('');
      });
    }

    ;
    validate();

    function checkbox() {
      var checkbox = document.querySelector('#checkbox-1');

      if (checkbox) {
        var callback = function callback(mutationList, observer1) {
          mutationList.forEach(function (mutation) {
            if (mutation.type === 'attributes' && mutation.attributeName === 'class') {
              if ($('#checkbox-1').hasClass('error')) {
                $('.form__checkbox').addClass('error-checkbox');
              } else {
                $('.form__checkbox').removeClass('error-checkbox');
              }
            }
          });
        };

        var options = {
          attributes: true
        };
        var observer1 = new MutationObserver(callback);
        observer1.observe(checkbox, options);
      }

      ;
    }

    ;
    checkbox();

    function radio() {
      var radio = document.querySelector('#radio-1');

      if (radio) {
        var callback = function callback(mutationList, observer2) {
          mutationList.forEach(function (mutation) {
            if (mutation.type === 'attributes' && mutation.attributeName === 'class') {
              if ($('#radio-1').hasClass('error')) {
                $('.form__radio').addClass('error-radio');
              } else {
                $('.form__radio').removeClass('error-radio');
              }
            }
          });
        };

        var options = {
          attributes: true
        };
        var observer2 = new MutationObserver(callback);
        observer2.observe(radio, options);
      }

      ;
    }

    ;
    radio(); // anim label

    function label() {
      var formInput = $('.form__t-input');
      var formGroup = '.js-form-group';
      var focused = 'focused';
      var filled = 'filled';
      formInput.focus(function () {
        $(this).parents(formGroup).addClass(focused);
      });
      formInput.blur(function () {
        var inputValue = $(this).val();

        if (inputValue == "") {
          $(this).removeClass(filled);
          $(this).parents(formGroup).removeClass(focused);
        } else {
          $(this).addClass(filled);
        }

        ;
      });
    }

    ;
    label(); // cookie

    function cookieMsgInit() {
      var cookieMsg = $.cookie('cookieMsg');
      var cookiesPopup = $('.cookies');
      var cookiesBtn = $('.cookies__btn');

      if (cookieMsg == 'true') {
        $('.cookies').hide(250);
        $('.intro').hide(0);
        Splitting();
        setTimeout(function () {
          $(".projects").addClass("ready");
        }, 1500);
      } else {
        $('.cookies').show(250);
        loaderFunc();
      }

      cookiesBtn.on('click', function () {
        cookiesPopup.hide(250);
        $.cookie('cookieMsg', 'true', {
          expires: 1
        });
      });
    }

    ;
    cookieMsgInit(); // spotlight

    function spotlight() {
      var xMouse = -500,
          yMouse = -500,
          lastScrolledLeft = 0,
          lastScrolledTop = 0;
      $(window).mousemove(function (e) {
        updateSpotlight(e);
        MousePosition(e);
      });

      function updateSpotlight(e, x, y) {
        if ($('.spotlight').length > 0) {
          var w = $('.spotlight').innerWidth(),
              h = $('.spotlight').innerHeight(),
              t = e.pageY - $('.spotlight').offset().top,
              l = e.pageX - $('.spotlight').offset().left;
          x = x || l;
          y = y || t;
          $('.spotlight').css('background-image', 'radial-gradient(circle at ' + x / w * 100 + '% ' + y / h * 100 + '%, transparent 0, rgba(0, 0, 0, .7) 400px)');
        }
      }

      function MousePosition(e) {
        if ($('.spotlight').length > 0) {
          xMouse = e.pageX - $('.spotlight').offset().left;
          yMouse = e.pageY - $('.spotlight').offset().top;
        }
      }

      $(window).scroll(function (e) {
        if (lastScrolledLeft != $(document).scrollLeft()) {
          xMouse -= lastScrolledLeft;
          lastScrolledLeft = $(document).scrollLeft();
          xMouse += lastScrolledLeft;
        }

        if (lastScrolledTop != $(document).scrollTop()) {
          yMouse -= lastScrolledTop;
          lastScrolledTop = $(document).scrollTop();
          yMouse += lastScrolledTop;
        }

        updateSpotlight(e, xMouse, yMouse);
      });
    }

    ;
    spotlight();
  }

  ;
  scriptLoad(); // awards counter

  function awardsFunc() {
    var odometer = $('.odometer');
    var awardsInfo = $('.awards__info');

    if (odometer.length > 0) {
      var addNum = function addNum() {
        odometer.each(function () {
          $(this).text(parseFloat($(this).data('value')));
        });
      };

      scroller.on('call', function (func) {
        if (awardsInfo) {
          addNum();
        }

        ;
      });
    }

    ;
  }

  ;
  awardsFunc(); // btn ajax

  function btnPageFunc(btn, path) {
    $(document).on('click', btn, function (e) {
      e.preventDefault();
      ajaxLoadPage(path);

      if ($.cookie('cookieMsg') == 'true') {
        $('.intro').addClass('is-cookie');
      } else {
        $('.intro').removeClass('is-cookie');
      }
    });
  }

  ;
  btnPageFunc('.js-contact-page', 'contact.html');
  btnPageFunc('.js-home-page', 'index.html');
  /* On Back / Forward */

  window.onpopstate = function () {
    ajaxLoadPage(location.href, false);
  };

  function ajaxLoadPage(url) {
    if ($('.ajax_inner').length < 2) {
      var toHistory = true;
      $('body').addClass('page_loaded');
      var section = $('<div class="ajax_inner overflow-hidden"></div>').appendTo('.ajax_wrap');
      section.load(url + ' .ajax_inner > *', function () {
        setTimeout(function () {
          section.prev('.active').removeClass('active').end().addClass('active').removeClass('overflow-hidden');
          section.prev('.ajax_inner').remove();
          scriptLoad();
          footerReadyEnd();
          footerReadyStart();
          awardsFunc();
          setTimeout(function () {
            scroller.update();
          }, 500);
          $('.intro').removeClass('ready');
          ScrollTrigger.addEventListener("refresh", function () {
            return scroller.update();
          });
          ScrollTrigger.refresh();
          var ajax_title = $(".ajax_wrap_data").data('title');
          var ajax_bodyclass = $(".ajax_wrap_data").data('bodyclass');
          $('body').attr('class', ajax_bodyclass);
          document.title = ajax_title;

          if (toHistory) {
            window.history.pushState({
              'dataurl': url
            }, ajax_title, url);
          }
        }, 500);
      });
    }

    ;
  }

  ;
});
})();

// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";
/*!*****************************!*\
  !*** ./src/styles/app.scss ***!
  \*****************************/
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin

})();

/******/ })()
;
//# sourceMappingURL=app.min.js.map
